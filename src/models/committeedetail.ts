/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detail schema for Committee (used in single item endpoints).
 */
export type CommitteeDetail = {
  createdAt: Date;
  key: string;
  name: string;
  updatedAt: Date;
  description: string;
};

/** @internal */
export const CommitteeDetail$inboundSchema: z.ZodType<
  CommitteeDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  key: z.string(),
  name: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CommitteeDetail$Outbound = {
  created_at: string;
  key: string;
  name: string;
  updated_at: string;
  description: string;
};

/** @internal */
export const CommitteeDetail$outboundSchema: z.ZodType<
  CommitteeDetail$Outbound,
  z.ZodTypeDef,
  CommitteeDetail
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  key: z.string(),
  name: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommitteeDetail$ {
  /** @deprecated use `CommitteeDetail$inboundSchema` instead. */
  export const inboundSchema = CommitteeDetail$inboundSchema;
  /** @deprecated use `CommitteeDetail$outboundSchema` instead. */
  export const outboundSchema = CommitteeDetail$outboundSchema;
  /** @deprecated use `CommitteeDetail$Outbound` instead. */
  export type Outbound = CommitteeDetail$Outbound;
}

export function committeeDetailToJSON(
  committeeDetail: CommitteeDetail,
): string {
  return JSON.stringify(CommitteeDetail$outboundSchema.parse(committeeDetail));
}

export function committeeDetailFromJSON(
  jsonString: string,
): SafeParseResult<CommitteeDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommitteeDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommitteeDetail' from JSON`,
  );
}
