/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Schema for Committee.
 */
export type CommitteeSchema = {
  name: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
};

/** @internal */
export const CommitteeSchema$inboundSchema: z.ZodType<
  CommitteeSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CommitteeSchema$Outbound = {
  name: string;
  description: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const CommitteeSchema$outboundSchema: z.ZodType<
  CommitteeSchema$Outbound,
  z.ZodTypeDef,
  CommitteeSchema
> = z.object({
  name: z.string(),
  description: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommitteeSchema$ {
  /** @deprecated use `CommitteeSchema$inboundSchema` instead. */
  export const inboundSchema = CommitteeSchema$inboundSchema;
  /** @deprecated use `CommitteeSchema$outboundSchema` instead. */
  export const outboundSchema = CommitteeSchema$outboundSchema;
  /** @deprecated use `CommitteeSchema$Outbound` instead. */
  export type Outbound = CommitteeSchema$Outbound;
}

export function committeeSchemaToJSON(
  committeeSchema: CommitteeSchema,
): string {
  return JSON.stringify(CommitteeSchema$outboundSchema.parse(committeeSchema));
}

export function committeeSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CommitteeSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommitteeSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommitteeSchema' from JSON`,
  );
}
