/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Schema for Event.
 */
export type EventSchema = {
  description: string;
  name: string;
  endDate: Date;
  startDate: Date;
  url: string;
};

/** @internal */
export const EventSchema$inboundSchema: z.ZodType<
  EventSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  name: z.string(),
  end_date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  start_date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_date": "endDate",
    "start_date": "startDate",
  });
});

/** @internal */
export type EventSchema$Outbound = {
  description: string;
  name: string;
  end_date: string;
  start_date: string;
  url: string;
};

/** @internal */
export const EventSchema$outboundSchema: z.ZodType<
  EventSchema$Outbound,
  z.ZodTypeDef,
  EventSchema
> = z.object({
  description: z.string(),
  name: z.string(),
  endDate: z.date().transform(v => v.toISOString()),
  startDate: z.date().transform(v => v.toISOString()),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endDate: "end_date",
    startDate: "start_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventSchema$ {
  /** @deprecated use `EventSchema$inboundSchema` instead. */
  export const inboundSchema = EventSchema$inboundSchema;
  /** @deprecated use `EventSchema$outboundSchema` instead. */
  export const outboundSchema = EventSchema$outboundSchema;
  /** @deprecated use `EventSchema$Outbound` instead. */
  export type Outbound = EventSchema$Outbound;
}

export function eventSchemaToJSON(eventSchema: EventSchema): string {
  return JSON.stringify(EventSchema$outboundSchema.parse(eventSchema));
}

export function eventSchemaFromJSON(
  jsonString: string,
): SafeParseResult<EventSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventSchema' from JSON`,
  );
}
