/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Schema for Member (minimal fields for list display).
 */
export type Member = {
  avatarUrl: string;
  createdAt: Date;
  login: string;
  name: string;
  updatedAt: Date;
  url: string;
};

/** @internal */
export const Member$inboundSchema: z.ZodType<Member, z.ZodTypeDef, unknown> = z
  .object({
    avatar_url: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    login: z.string(),
    name: z.string(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    url: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "avatar_url": "avatarUrl",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Member$Outbound = {
  avatar_url: string;
  created_at: string;
  login: string;
  name: string;
  updated_at: string;
  url: string;
};

/** @internal */
export const Member$outboundSchema: z.ZodType<
  Member$Outbound,
  z.ZodTypeDef,
  Member
> = z.object({
  avatarUrl: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  login: z.string(),
  name: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Member$ {
  /** @deprecated use `Member$inboundSchema` instead. */
  export const inboundSchema = Member$inboundSchema;
  /** @deprecated use `Member$outboundSchema` instead. */
  export const outboundSchema = Member$outboundSchema;
  /** @deprecated use `Member$Outbound` instead. */
  export type Outbound = Member$Outbound;
}

export function memberToJSON(member: Member): string {
  return JSON.stringify(Member$outboundSchema.parse(member));
}

export function memberFromJSON(
  jsonString: string,
): SafeParseResult<Member, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Member$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Member' from JSON`,
  );
}
