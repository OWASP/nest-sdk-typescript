/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detail schema for Member (used in single item endpoints).
 */
export type MemberDetail = {
  avatarUrl: string;
  createdAt: Date;
  login: string;
  name: string;
  updatedAt: Date;
  url: string;
  bio: string;
  company: string;
  followersCount: number;
  followingCount: number;
  location: string;
  publicRepositoriesCount: number;
  title: string;
  twitterUsername: string;
};

/** @internal */
export const MemberDetail$inboundSchema: z.ZodType<
  MemberDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar_url: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  login: z.string(),
  name: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  url: z.string(),
  bio: z.string(),
  company: z.string(),
  followers_count: z.number().int(),
  following_count: z.number().int(),
  location: z.string(),
  public_repositories_count: z.number().int(),
  title: z.string(),
  twitter_username: z.string(),
}).transform((v) => {
  return remap$(v, {
    "avatar_url": "avatarUrl",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "followers_count": "followersCount",
    "following_count": "followingCount",
    "public_repositories_count": "publicRepositoriesCount",
    "twitter_username": "twitterUsername",
  });
});

/** @internal */
export type MemberDetail$Outbound = {
  avatar_url: string;
  created_at: string;
  login: string;
  name: string;
  updated_at: string;
  url: string;
  bio: string;
  company: string;
  followers_count: number;
  following_count: number;
  location: string;
  public_repositories_count: number;
  title: string;
  twitter_username: string;
};

/** @internal */
export const MemberDetail$outboundSchema: z.ZodType<
  MemberDetail$Outbound,
  z.ZodTypeDef,
  MemberDetail
> = z.object({
  avatarUrl: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  login: z.string(),
  name: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  url: z.string(),
  bio: z.string(),
  company: z.string(),
  followersCount: z.number().int(),
  followingCount: z.number().int(),
  location: z.string(),
  publicRepositoriesCount: z.number().int(),
  title: z.string(),
  twitterUsername: z.string(),
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    createdAt: "created_at",
    updatedAt: "updated_at",
    followersCount: "followers_count",
    followingCount: "following_count",
    publicRepositoriesCount: "public_repositories_count",
    twitterUsername: "twitter_username",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberDetail$ {
  /** @deprecated use `MemberDetail$inboundSchema` instead. */
  export const inboundSchema = MemberDetail$inboundSchema;
  /** @deprecated use `MemberDetail$outboundSchema` instead. */
  export const outboundSchema = MemberDetail$outboundSchema;
  /** @deprecated use `MemberDetail$Outbound` instead. */
  export type Outbound = MemberDetail$Outbound;
}

export function memberDetailToJSON(memberDetail: MemberDetail): string {
  return JSON.stringify(MemberDetail$outboundSchema.parse(memberDetail));
}

export function memberDetailFromJSON(
  jsonString: string,
): SafeParseResult<MemberDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MemberDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MemberDetail' from JSON`,
  );
}
