/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEventRequest = {
  eventId: string;
};

/** @internal */
export const GetEventRequest$inboundSchema: z.ZodType<
  GetEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "event_id": "eventId",
  });
});

/** @internal */
export type GetEventRequest$Outbound = {
  event_id: string;
};

/** @internal */
export const GetEventRequest$outboundSchema: z.ZodType<
  GetEventRequest$Outbound,
  z.ZodTypeDef,
  GetEventRequest
> = z.object({
  eventId: z.string(),
}).transform((v) => {
  return remap$(v, {
    eventId: "event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventRequest$ {
  /** @deprecated use `GetEventRequest$inboundSchema` instead. */
  export const inboundSchema = GetEventRequest$inboundSchema;
  /** @deprecated use `GetEventRequest$outboundSchema` instead. */
  export const outboundSchema = GetEventRequest$outboundSchema;
  /** @deprecated use `GetEventRequest$Outbound` instead. */
  export type Outbound = GetEventRequest$Outbound;
}

export function getEventRequestToJSON(
  getEventRequest: GetEventRequest,
): string {
  return JSON.stringify(GetEventRequest$outboundSchema.parse(getEventRequest));
}

export function getEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventRequest' from JSON`,
  );
}
