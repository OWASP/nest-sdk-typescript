/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Ordering field
 */
export const ListChaptersOrdering = {
  CreatedAt: "created_at",
  MinusCreatedAt: "-created_at",
  UpdatedAt: "updated_at",
  MinusUpdatedAt: "-updated_at",
} as const;
/**
 * Ordering field
 */
export type ListChaptersOrdering = ClosedEnum<typeof ListChaptersOrdering>;

export type ListChaptersRequest = {
  /**
   * Country of the chapter
   */
  country?: string | null | undefined;
  /**
   * Region of the chapter
   */
  region?: string | null | undefined;
  /**
   * Ordering field
   */
  ordering?: ListChaptersOrdering | null | undefined;
  page?: number | undefined;
  pageSize?: number | null | undefined;
};

/** @internal */
export const ListChaptersOrdering$inboundSchema: z.ZodNativeEnum<
  typeof ListChaptersOrdering
> = z.nativeEnum(ListChaptersOrdering);

/** @internal */
export const ListChaptersOrdering$outboundSchema: z.ZodNativeEnum<
  typeof ListChaptersOrdering
> = ListChaptersOrdering$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChaptersOrdering$ {
  /** @deprecated use `ListChaptersOrdering$inboundSchema` instead. */
  export const inboundSchema = ListChaptersOrdering$inboundSchema;
  /** @deprecated use `ListChaptersOrdering$outboundSchema` instead. */
  export const outboundSchema = ListChaptersOrdering$outboundSchema;
}

/** @internal */
export const ListChaptersRequest$inboundSchema: z.ZodType<
  ListChaptersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  ordering: z.nullable(ListChaptersOrdering$inboundSchema).optional(),
  page: z.number().int().default(1),
  page_size: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
  });
});

/** @internal */
export type ListChaptersRequest$Outbound = {
  country?: string | null | undefined;
  region?: string | null | undefined;
  ordering?: string | null | undefined;
  page: number;
  page_size?: number | null | undefined;
};

/** @internal */
export const ListChaptersRequest$outboundSchema: z.ZodType<
  ListChaptersRequest$Outbound,
  z.ZodTypeDef,
  ListChaptersRequest
> = z.object({
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  ordering: z.nullable(ListChaptersOrdering$outboundSchema).optional(),
  page: z.number().int().default(1),
  pageSize: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChaptersRequest$ {
  /** @deprecated use `ListChaptersRequest$inboundSchema` instead. */
  export const inboundSchema = ListChaptersRequest$inboundSchema;
  /** @deprecated use `ListChaptersRequest$outboundSchema` instead. */
  export const outboundSchema = ListChaptersRequest$outboundSchema;
  /** @deprecated use `ListChaptersRequest$Outbound` instead. */
  export type Outbound = ListChaptersRequest$Outbound;
}

export function listChaptersRequestToJSON(
  listChaptersRequest: ListChaptersRequest,
): string {
  return JSON.stringify(
    ListChaptersRequest$outboundSchema.parse(listChaptersRequest),
  );
}

export function listChaptersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListChaptersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChaptersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChaptersRequest' from JSON`,
  );
}
