/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Ordering field
 */
export const ListMembersOrdering = {
  CreatedAt: "created_at",
  MinusCreatedAt: "-created_at",
  UpdatedAt: "updated_at",
  MinusUpdatedAt: "-updated_at",
} as const;
/**
 * Ordering field
 */
export type ListMembersOrdering = ClosedEnum<typeof ListMembersOrdering>;

export type ListMembersRequest = {
  /**
   * Company of the user
   */
  company?: string | null | undefined;
  /**
   * Location of the member
   */
  location?: string | null | undefined;
  /**
   * Ordering field
   */
  ordering?: ListMembersOrdering | null | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Number of items per page
   */
  pageSize?: number | undefined;
};

/** @internal */
export const ListMembersOrdering$inboundSchema: z.ZodNativeEnum<
  typeof ListMembersOrdering
> = z.nativeEnum(ListMembersOrdering);

/** @internal */
export const ListMembersOrdering$outboundSchema: z.ZodNativeEnum<
  typeof ListMembersOrdering
> = ListMembersOrdering$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMembersOrdering$ {
  /** @deprecated use `ListMembersOrdering$inboundSchema` instead. */
  export const inboundSchema = ListMembersOrdering$inboundSchema;
  /** @deprecated use `ListMembersOrdering$outboundSchema` instead. */
  export const outboundSchema = ListMembersOrdering$outboundSchema;
}

/** @internal */
export const ListMembersRequest$inboundSchema: z.ZodType<
  ListMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  ordering: z.nullable(ListMembersOrdering$inboundSchema).optional(),
  page: z.number().int().default(1),
  page_size: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
  });
});

/** @internal */
export type ListMembersRequest$Outbound = {
  company?: string | null | undefined;
  location?: string | null | undefined;
  ordering?: string | null | undefined;
  page: number;
  page_size: number;
};

/** @internal */
export const ListMembersRequest$outboundSchema: z.ZodType<
  ListMembersRequest$Outbound,
  z.ZodTypeDef,
  ListMembersRequest
> = z.object({
  company: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  ordering: z.nullable(ListMembersOrdering$outboundSchema).optional(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMembersRequest$ {
  /** @deprecated use `ListMembersRequest$inboundSchema` instead. */
  export const inboundSchema = ListMembersRequest$inboundSchema;
  /** @deprecated use `ListMembersRequest$outboundSchema` instead. */
  export const outboundSchema = ListMembersRequest$outboundSchema;
  /** @deprecated use `ListMembersRequest$Outbound` instead. */
  export type Outbound = ListMembersRequest$Outbound;
}

export function listMembersRequestToJSON(
  listMembersRequest: ListMembersRequest,
): string {
  return JSON.stringify(
    ListMembersRequest$outboundSchema.parse(listMembersRequest),
  );
}

export function listMembersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMembersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMembersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMembersRequest' from JSON`,
  );
}
