/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const ListMilestonesOrdering = {
  CreatedAt: "created_at",
  MinusCreatedAt: "-created_at",
  UpdatedAt: "updated_at",
  MinusUpdatedAt: "-updated_at",
} as const;
export type ListMilestonesOrdering = ClosedEnum<typeof ListMilestonesOrdering>;

export type ListMilestonesRequest = {
  /**
   * Organization that milestones belong to (filtered by repository owner)
   */
  organization?: string | null | undefined;
  /**
   * Repository that milestones belong to
   */
  repository?: string | null | undefined;
  /**
   * Milestone state
   */
  state?: models.State | null | undefined;
  ordering?: ListMilestonesOrdering | null | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Number of items per page
   */
  pageSize?: number | undefined;
};

/** @internal */
export const ListMilestonesOrdering$inboundSchema: z.ZodNativeEnum<
  typeof ListMilestonesOrdering
> = z.nativeEnum(ListMilestonesOrdering);

/** @internal */
export const ListMilestonesOrdering$outboundSchema: z.ZodNativeEnum<
  typeof ListMilestonesOrdering
> = ListMilestonesOrdering$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMilestonesOrdering$ {
  /** @deprecated use `ListMilestonesOrdering$inboundSchema` instead. */
  export const inboundSchema = ListMilestonesOrdering$inboundSchema;
  /** @deprecated use `ListMilestonesOrdering$outboundSchema` instead. */
  export const outboundSchema = ListMilestonesOrdering$outboundSchema;
}

/** @internal */
export const ListMilestonesRequest$inboundSchema: z.ZodType<
  ListMilestonesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: z.nullable(z.string()).optional(),
  repository: z.nullable(z.string()).optional(),
  state: z.nullable(models.State$inboundSchema).optional(),
  ordering: z.nullable(ListMilestonesOrdering$inboundSchema).optional(),
  page: z.number().int().default(1),
  page_size: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
  });
});

/** @internal */
export type ListMilestonesRequest$Outbound = {
  organization?: string | null | undefined;
  repository?: string | null | undefined;
  state?: string | null | undefined;
  ordering?: string | null | undefined;
  page: number;
  page_size: number;
};

/** @internal */
export const ListMilestonesRequest$outboundSchema: z.ZodType<
  ListMilestonesRequest$Outbound,
  z.ZodTypeDef,
  ListMilestonesRequest
> = z.object({
  organization: z.nullable(z.string()).optional(),
  repository: z.nullable(z.string()).optional(),
  state: z.nullable(models.State$outboundSchema).optional(),
  ordering: z.nullable(ListMilestonesOrdering$outboundSchema).optional(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMilestonesRequest$ {
  /** @deprecated use `ListMilestonesRequest$inboundSchema` instead. */
  export const inboundSchema = ListMilestonesRequest$inboundSchema;
  /** @deprecated use `ListMilestonesRequest$outboundSchema` instead. */
  export const outboundSchema = ListMilestonesRequest$outboundSchema;
  /** @deprecated use `ListMilestonesRequest$Outbound` instead. */
  export type Outbound = ListMilestonesRequest$Outbound;
}

export function listMilestonesRequestToJSON(
  listMilestonesRequest: ListMilestonesRequest,
): string {
  return JSON.stringify(
    ListMilestonesRequest$outboundSchema.parse(listMilestonesRequest),
  );
}

export function listMilestonesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMilestonesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMilestonesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMilestonesRequest' from JSON`,
  );
}
