/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Ordering field
 */
export const ListReleasesOrdering = {
  CreatedAt: "created_at",
  MinusCreatedAt: "-created_at",
  PublishedAt: "published_at",
  MinusPublishedAt: "-published_at",
} as const;
/**
 * Ordering field
 */
export type ListReleasesOrdering = ClosedEnum<typeof ListReleasesOrdering>;

export type ListReleasesRequest = {
  /**
   * Organization that releases belong to (filtered by repository owner)
   */
  organization?: string | null | undefined;
  /**
   * Repository that releases belong to
   */
  repository?: string | null | undefined;
  /**
   * Tag name of the release
   */
  tagName?: string | null | undefined;
  /**
   * Ordering field
   */
  ordering?: ListReleasesOrdering | null | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Number of items per page
   */
  pageSize?: number | undefined;
};

/** @internal */
export const ListReleasesOrdering$inboundSchema: z.ZodNativeEnum<
  typeof ListReleasesOrdering
> = z.nativeEnum(ListReleasesOrdering);

/** @internal */
export const ListReleasesOrdering$outboundSchema: z.ZodNativeEnum<
  typeof ListReleasesOrdering
> = ListReleasesOrdering$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReleasesOrdering$ {
  /** @deprecated use `ListReleasesOrdering$inboundSchema` instead. */
  export const inboundSchema = ListReleasesOrdering$inboundSchema;
  /** @deprecated use `ListReleasesOrdering$outboundSchema` instead. */
  export const outboundSchema = ListReleasesOrdering$outboundSchema;
}

/** @internal */
export const ListReleasesRequest$inboundSchema: z.ZodType<
  ListReleasesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: z.nullable(z.string()).optional(),
  repository: z.nullable(z.string()).optional(),
  tag_name: z.nullable(z.string()).optional(),
  ordering: z.nullable(ListReleasesOrdering$inboundSchema).optional(),
  page: z.number().int().default(1),
  page_size: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    "tag_name": "tagName",
    "page_size": "pageSize",
  });
});

/** @internal */
export type ListReleasesRequest$Outbound = {
  organization?: string | null | undefined;
  repository?: string | null | undefined;
  tag_name?: string | null | undefined;
  ordering?: string | null | undefined;
  page: number;
  page_size: number;
};

/** @internal */
export const ListReleasesRequest$outboundSchema: z.ZodType<
  ListReleasesRequest$Outbound,
  z.ZodTypeDef,
  ListReleasesRequest
> = z.object({
  organization: z.nullable(z.string()).optional(),
  repository: z.nullable(z.string()).optional(),
  tagName: z.nullable(z.string()).optional(),
  ordering: z.nullable(ListReleasesOrdering$outboundSchema).optional(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    tagName: "tag_name",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReleasesRequest$ {
  /** @deprecated use `ListReleasesRequest$inboundSchema` instead. */
  export const inboundSchema = ListReleasesRequest$inboundSchema;
  /** @deprecated use `ListReleasesRequest$outboundSchema` instead. */
  export const outboundSchema = ListReleasesRequest$outboundSchema;
  /** @deprecated use `ListReleasesRequest$Outbound` instead. */
  export type Outbound = ListReleasesRequest$Outbound;
}

export function listReleasesRequestToJSON(
  listReleasesRequest: ListReleasesRequest,
): string {
  return JSON.stringify(
    ListReleasesRequest$outboundSchema.parse(listReleasesRequest),
  );
}

export function listReleasesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListReleasesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListReleasesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListReleasesRequest' from JSON`,
  );
}
