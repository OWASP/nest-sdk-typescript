/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Ordering field
 */
export const ListRepositoriesOrdering = {
  CreatedAt: "created_at",
  MinusCreatedAt: "-created_at",
  UpdatedAt: "updated_at",
  MinusUpdatedAt: "-updated_at",
} as const;
/**
 * Ordering field
 */
export type ListRepositoriesOrdering = ClosedEnum<
  typeof ListRepositoriesOrdering
>;

export type ListRepositoriesRequest = {
  /**
   * Ordering field
   */
  ordering?: ListRepositoriesOrdering | null | undefined;
  page?: number | undefined;
  pageSize?: number | null | undefined;
};

/** @internal */
export const ListRepositoriesOrdering$inboundSchema: z.ZodNativeEnum<
  typeof ListRepositoriesOrdering
> = z.nativeEnum(ListRepositoriesOrdering);

/** @internal */
export const ListRepositoriesOrdering$outboundSchema: z.ZodNativeEnum<
  typeof ListRepositoriesOrdering
> = ListRepositoriesOrdering$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRepositoriesOrdering$ {
  /** @deprecated use `ListRepositoriesOrdering$inboundSchema` instead. */
  export const inboundSchema = ListRepositoriesOrdering$inboundSchema;
  /** @deprecated use `ListRepositoriesOrdering$outboundSchema` instead. */
  export const outboundSchema = ListRepositoriesOrdering$outboundSchema;
}

/** @internal */
export const ListRepositoriesRequest$inboundSchema: z.ZodType<
  ListRepositoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ordering: z.nullable(ListRepositoriesOrdering$inboundSchema).optional(),
  page: z.number().int().default(1),
  page_size: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
  });
});

/** @internal */
export type ListRepositoriesRequest$Outbound = {
  ordering?: string | null | undefined;
  page: number;
  page_size?: number | null | undefined;
};

/** @internal */
export const ListRepositoriesRequest$outboundSchema: z.ZodType<
  ListRepositoriesRequest$Outbound,
  z.ZodTypeDef,
  ListRepositoriesRequest
> = z.object({
  ordering: z.nullable(ListRepositoriesOrdering$outboundSchema).optional(),
  page: z.number().int().default(1),
  pageSize: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRepositoriesRequest$ {
  /** @deprecated use `ListRepositoriesRequest$inboundSchema` instead. */
  export const inboundSchema = ListRepositoriesRequest$inboundSchema;
  /** @deprecated use `ListRepositoriesRequest$outboundSchema` instead. */
  export const outboundSchema = ListRepositoriesRequest$outboundSchema;
  /** @deprecated use `ListRepositoriesRequest$Outbound` instead. */
  export type Outbound = ListRepositoriesRequest$Outbound;
}

export function listRepositoriesRequestToJSON(
  listRepositoriesRequest: ListRepositoriesRequest,
): string {
  return JSON.stringify(
    ListRepositoriesRequest$outboundSchema.parse(listRepositoriesRequest),
  );
}

export function listRepositoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRepositoriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRepositoriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRepositoriesRequest' from JSON`,
  );
}
