/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CommitteeSchema,
  CommitteeSchema$inboundSchema,
  CommitteeSchema$Outbound,
  CommitteeSchema$outboundSchema,
} from "./committeeschema.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PagedCommitteeSchema = {
  items: Array<CommitteeSchema>;
  count: number;
};

/** @internal */
export const PagedCommitteeSchema$inboundSchema: z.ZodType<
  PagedCommitteeSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(CommitteeSchema$inboundSchema),
  count: z.number().int(),
});

/** @internal */
export type PagedCommitteeSchema$Outbound = {
  items: Array<CommitteeSchema$Outbound>;
  count: number;
};

/** @internal */
export const PagedCommitteeSchema$outboundSchema: z.ZodType<
  PagedCommitteeSchema$Outbound,
  z.ZodTypeDef,
  PagedCommitteeSchema
> = z.object({
  items: z.array(CommitteeSchema$outboundSchema),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedCommitteeSchema$ {
  /** @deprecated use `PagedCommitteeSchema$inboundSchema` instead. */
  export const inboundSchema = PagedCommitteeSchema$inboundSchema;
  /** @deprecated use `PagedCommitteeSchema$outboundSchema` instead. */
  export const outboundSchema = PagedCommitteeSchema$outboundSchema;
  /** @deprecated use `PagedCommitteeSchema$Outbound` instead. */
  export type Outbound = PagedCommitteeSchema$Outbound;
}

export function pagedCommitteeSchemaToJSON(
  pagedCommitteeSchema: PagedCommitteeSchema,
): string {
  return JSON.stringify(
    PagedCommitteeSchema$outboundSchema.parse(pagedCommitteeSchema),
  );
}

export function pagedCommitteeSchemaFromJSON(
  jsonString: string,
): SafeParseResult<PagedCommitteeSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedCommitteeSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedCommitteeSchema' from JSON`,
  );
}
