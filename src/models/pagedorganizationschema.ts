/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OrganizationSchema,
  OrganizationSchema$inboundSchema,
  OrganizationSchema$Outbound,
  OrganizationSchema$outboundSchema,
} from "./organizationschema.js";

export type PagedOrganizationSchema = {
  items: Array<OrganizationSchema>;
  count: number;
};

/** @internal */
export const PagedOrganizationSchema$inboundSchema: z.ZodType<
  PagedOrganizationSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(OrganizationSchema$inboundSchema),
  count: z.number().int(),
});

/** @internal */
export type PagedOrganizationSchema$Outbound = {
  items: Array<OrganizationSchema$Outbound>;
  count: number;
};

/** @internal */
export const PagedOrganizationSchema$outboundSchema: z.ZodType<
  PagedOrganizationSchema$Outbound,
  z.ZodTypeDef,
  PagedOrganizationSchema
> = z.object({
  items: z.array(OrganizationSchema$outboundSchema),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedOrganizationSchema$ {
  /** @deprecated use `PagedOrganizationSchema$inboundSchema` instead. */
  export const inboundSchema = PagedOrganizationSchema$inboundSchema;
  /** @deprecated use `PagedOrganizationSchema$outboundSchema` instead. */
  export const outboundSchema = PagedOrganizationSchema$outboundSchema;
  /** @deprecated use `PagedOrganizationSchema$Outbound` instead. */
  export type Outbound = PagedOrganizationSchema$Outbound;
}

export function pagedOrganizationSchemaToJSON(
  pagedOrganizationSchema: PagedOrganizationSchema,
): string {
  return JSON.stringify(
    PagedOrganizationSchema$outboundSchema.parse(pagedOrganizationSchema),
  );
}

export function pagedOrganizationSchemaFromJSON(
  jsonString: string,
): SafeParseResult<PagedOrganizationSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedOrganizationSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedOrganizationSchema' from JSON`,
  );
}
