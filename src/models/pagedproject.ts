/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Project,
  Project$inboundSchema,
  Project$Outbound,
  Project$outboundSchema,
} from "./project.js";

export type PagedProject = {
  /**
   * Current page number
   */
  currentPage: number;
  /**
   * Whether there is a next page
   */
  hasNext: boolean;
  /**
   * Whether there is a previous page
   */
  hasPrevious: boolean;
  items: Array<Project>;
  /**
   * Total number of items
   */
  totalCount: number;
  /**
   * Total number of pages
   */
  totalPages: number;
};

/** @internal */
export const PagedProject$inboundSchema: z.ZodType<
  PagedProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_page: z.number().int(),
  has_next: z.boolean(),
  has_previous: z.boolean(),
  items: z.array(Project$inboundSchema),
  total_count: z.number().int(),
  total_pages: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "current_page": "currentPage",
    "has_next": "hasNext",
    "has_previous": "hasPrevious",
    "total_count": "totalCount",
    "total_pages": "totalPages",
  });
});

/** @internal */
export type PagedProject$Outbound = {
  current_page: number;
  has_next: boolean;
  has_previous: boolean;
  items: Array<Project$Outbound>;
  total_count: number;
  total_pages: number;
};

/** @internal */
export const PagedProject$outboundSchema: z.ZodType<
  PagedProject$Outbound,
  z.ZodTypeDef,
  PagedProject
> = z.object({
  currentPage: z.number().int(),
  hasNext: z.boolean(),
  hasPrevious: z.boolean(),
  items: z.array(Project$outboundSchema),
  totalCount: z.number().int(),
  totalPages: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    currentPage: "current_page",
    hasNext: "has_next",
    hasPrevious: "has_previous",
    totalCount: "total_count",
    totalPages: "total_pages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedProject$ {
  /** @deprecated use `PagedProject$inboundSchema` instead. */
  export const inboundSchema = PagedProject$inboundSchema;
  /** @deprecated use `PagedProject$outboundSchema` instead. */
  export const outboundSchema = PagedProject$outboundSchema;
  /** @deprecated use `PagedProject$Outbound` instead. */
  export type Outbound = PagedProject$Outbound;
}

export function pagedProjectToJSON(pagedProject: PagedProject): string {
  return JSON.stringify(PagedProject$outboundSchema.parse(pagedProject));
}

export function pagedProjectFromJSON(
  jsonString: string,
): SafeParseResult<PagedProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedProject' from JSON`,
  );
}
