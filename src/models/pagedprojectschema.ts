/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProjectSchema,
  ProjectSchema$inboundSchema,
  ProjectSchema$Outbound,
  ProjectSchema$outboundSchema,
} from "./projectschema.js";

export type PagedProjectSchema = {
  items: Array<ProjectSchema>;
  count: number;
};

/** @internal */
export const PagedProjectSchema$inboundSchema: z.ZodType<
  PagedProjectSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ProjectSchema$inboundSchema),
  count: z.number().int(),
});

/** @internal */
export type PagedProjectSchema$Outbound = {
  items: Array<ProjectSchema$Outbound>;
  count: number;
};

/** @internal */
export const PagedProjectSchema$outboundSchema: z.ZodType<
  PagedProjectSchema$Outbound,
  z.ZodTypeDef,
  PagedProjectSchema
> = z.object({
  items: z.array(ProjectSchema$outboundSchema),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedProjectSchema$ {
  /** @deprecated use `PagedProjectSchema$inboundSchema` instead. */
  export const inboundSchema = PagedProjectSchema$inboundSchema;
  /** @deprecated use `PagedProjectSchema$outboundSchema` instead. */
  export const outboundSchema = PagedProjectSchema$outboundSchema;
  /** @deprecated use `PagedProjectSchema$Outbound` instead. */
  export type Outbound = PagedProjectSchema$Outbound;
}

export function pagedProjectSchemaToJSON(
  pagedProjectSchema: PagedProjectSchema,
): string {
  return JSON.stringify(
    PagedProjectSchema$outboundSchema.parse(pagedProjectSchema),
  );
}

export function pagedProjectSchemaFromJSON(
  jsonString: string,
): SafeParseResult<PagedProjectSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedProjectSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedProjectSchema' from JSON`,
  );
}
