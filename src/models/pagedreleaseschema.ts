/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReleaseSchema,
  ReleaseSchema$inboundSchema,
  ReleaseSchema$Outbound,
  ReleaseSchema$outboundSchema,
} from "./releaseschema.js";

export type PagedReleaseSchema = {
  items: Array<ReleaseSchema>;
  count: number;
};

/** @internal */
export const PagedReleaseSchema$inboundSchema: z.ZodType<
  PagedReleaseSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ReleaseSchema$inboundSchema),
  count: z.number().int(),
});

/** @internal */
export type PagedReleaseSchema$Outbound = {
  items: Array<ReleaseSchema$Outbound>;
  count: number;
};

/** @internal */
export const PagedReleaseSchema$outboundSchema: z.ZodType<
  PagedReleaseSchema$Outbound,
  z.ZodTypeDef,
  PagedReleaseSchema
> = z.object({
  items: z.array(ReleaseSchema$outboundSchema),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedReleaseSchema$ {
  /** @deprecated use `PagedReleaseSchema$inboundSchema` instead. */
  export const inboundSchema = PagedReleaseSchema$inboundSchema;
  /** @deprecated use `PagedReleaseSchema$outboundSchema` instead. */
  export const outboundSchema = PagedReleaseSchema$outboundSchema;
  /** @deprecated use `PagedReleaseSchema$Outbound` instead. */
  export type Outbound = PagedReleaseSchema$Outbound;
}

export function pagedReleaseSchemaToJSON(
  pagedReleaseSchema: PagedReleaseSchema,
): string {
  return JSON.stringify(
    PagedReleaseSchema$outboundSchema.parse(pagedReleaseSchema),
  );
}

export function pagedReleaseSchemaFromJSON(
  jsonString: string,
): SafeParseResult<PagedReleaseSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedReleaseSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedReleaseSchema' from JSON`,
  );
}
