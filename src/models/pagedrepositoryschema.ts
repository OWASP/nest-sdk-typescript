/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RepositorySchema,
  RepositorySchema$inboundSchema,
  RepositorySchema$Outbound,
  RepositorySchema$outboundSchema,
} from "./repositoryschema.js";

export type PagedRepositorySchema = {
  items: Array<RepositorySchema>;
  count: number;
};

/** @internal */
export const PagedRepositorySchema$inboundSchema: z.ZodType<
  PagedRepositorySchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(RepositorySchema$inboundSchema),
  count: z.number().int(),
});

/** @internal */
export type PagedRepositorySchema$Outbound = {
  items: Array<RepositorySchema$Outbound>;
  count: number;
};

/** @internal */
export const PagedRepositorySchema$outboundSchema: z.ZodType<
  PagedRepositorySchema$Outbound,
  z.ZodTypeDef,
  PagedRepositorySchema
> = z.object({
  items: z.array(RepositorySchema$outboundSchema),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedRepositorySchema$ {
  /** @deprecated use `PagedRepositorySchema$inboundSchema` instead. */
  export const inboundSchema = PagedRepositorySchema$inboundSchema;
  /** @deprecated use `PagedRepositorySchema$outboundSchema` instead. */
  export const outboundSchema = PagedRepositorySchema$outboundSchema;
  /** @deprecated use `PagedRepositorySchema$Outbound` instead. */
  export type Outbound = PagedRepositorySchema$Outbound;
}

export function pagedRepositorySchemaToJSON(
  pagedRepositorySchema: PagedRepositorySchema,
): string {
  return JSON.stringify(
    PagedRepositorySchema$outboundSchema.parse(pagedRepositorySchema),
  );
}

export function pagedRepositorySchemaFromJSON(
  jsonString: string,
): SafeParseResult<PagedRepositorySchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedRepositorySchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedRepositorySchema' from JSON`,
  );
}
