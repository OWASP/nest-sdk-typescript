/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SponsorSchema,
  SponsorSchema$inboundSchema,
  SponsorSchema$Outbound,
  SponsorSchema$outboundSchema,
} from "./sponsorschema.js";

export type PagedSponsorSchema = {
  items: Array<SponsorSchema>;
  count: number;
};

/** @internal */
export const PagedSponsorSchema$inboundSchema: z.ZodType<
  PagedSponsorSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(SponsorSchema$inboundSchema),
  count: z.number().int(),
});

/** @internal */
export type PagedSponsorSchema$Outbound = {
  items: Array<SponsorSchema$Outbound>;
  count: number;
};

/** @internal */
export const PagedSponsorSchema$outboundSchema: z.ZodType<
  PagedSponsorSchema$Outbound,
  z.ZodTypeDef,
  PagedSponsorSchema
> = z.object({
  items: z.array(SponsorSchema$outboundSchema),
  count: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagedSponsorSchema$ {
  /** @deprecated use `PagedSponsorSchema$inboundSchema` instead. */
  export const inboundSchema = PagedSponsorSchema$inboundSchema;
  /** @deprecated use `PagedSponsorSchema$outboundSchema` instead. */
  export const outboundSchema = PagedSponsorSchema$outboundSchema;
  /** @deprecated use `PagedSponsorSchema$Outbound` instead. */
  export type Outbound = PagedSponsorSchema$Outbound;
}

export function pagedSponsorSchemaToJSON(
  pagedSponsorSchema: PagedSponsorSchema,
): string {
  return JSON.stringify(
    PagedSponsorSchema$outboundSchema.parse(pagedSponsorSchema),
  );
}

export function pagedSponsorSchemaFromJSON(
  jsonString: string,
): SafeParseResult<PagedSponsorSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagedSponsorSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagedSponsorSchema' from JSON`,
  );
}
