/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProjectLevel,
  ProjectLevel$inboundSchema,
  ProjectLevel$outboundSchema,
} from "./projectlevel.js";

/**
 * Schema for Project.
 */
export type ProjectSchema = {
  createdAt: Date;
  description: string;
  /**
   * Enum for OWASP project levels.
   */
  level: ProjectLevel;
  name: string;
  updatedAt: Date;
};

/** @internal */
export const ProjectSchema$inboundSchema: z.ZodType<
  ProjectSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  level: ProjectLevel$inboundSchema,
  name: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ProjectSchema$Outbound = {
  created_at: string;
  description: string;
  level: string;
  name: string;
  updated_at: string;
};

/** @internal */
export const ProjectSchema$outboundSchema: z.ZodType<
  ProjectSchema$Outbound,
  z.ZodTypeDef,
  ProjectSchema
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  level: ProjectLevel$outboundSchema,
  name: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSchema$ {
  /** @deprecated use `ProjectSchema$inboundSchema` instead. */
  export const inboundSchema = ProjectSchema$inboundSchema;
  /** @deprecated use `ProjectSchema$outboundSchema` instead. */
  export const outboundSchema = ProjectSchema$outboundSchema;
  /** @deprecated use `ProjectSchema$Outbound` instead. */
  export type Outbound = ProjectSchema$Outbound;
}

export function projectSchemaToJSON(projectSchema: ProjectSchema): string {
  return JSON.stringify(ProjectSchema$outboundSchema.parse(projectSchema));
}

export function projectSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSchema' from JSON`,
  );
}
