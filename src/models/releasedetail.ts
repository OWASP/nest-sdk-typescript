/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detail schema for Release (used in single item endpoints).
 */
export type ReleaseDetail = {
  createdAt: Date;
  name: string;
  publishedAt?: Date | null | undefined;
  tagName: string;
  description: string;
};

/** @internal */
export const ReleaseDetail$inboundSchema: z.ZodType<
  ReleaseDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  name: z.string(),
  published_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  tag_name: z.string(),
  description: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "published_at": "publishedAt",
    "tag_name": "tagName",
  });
});

/** @internal */
export type ReleaseDetail$Outbound = {
  created_at: string;
  name: string;
  published_at?: string | null | undefined;
  tag_name: string;
  description: string;
};

/** @internal */
export const ReleaseDetail$outboundSchema: z.ZodType<
  ReleaseDetail$Outbound,
  z.ZodTypeDef,
  ReleaseDetail
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  name: z.string(),
  publishedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  tagName: z.string(),
  description: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    publishedAt: "published_at",
    tagName: "tag_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseDetail$ {
  /** @deprecated use `ReleaseDetail$inboundSchema` instead. */
  export const inboundSchema = ReleaseDetail$inboundSchema;
  /** @deprecated use `ReleaseDetail$outboundSchema` instead. */
  export const outboundSchema = ReleaseDetail$outboundSchema;
  /** @deprecated use `ReleaseDetail$Outbound` instead. */
  export type Outbound = ReleaseDetail$Outbound;
}

export function releaseDetailToJSON(releaseDetail: ReleaseDetail): string {
  return JSON.stringify(ReleaseDetail$outboundSchema.parse(releaseDetail));
}

export function releaseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseDetail' from JSON`,
  );
}
