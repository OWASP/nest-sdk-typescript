/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Schema for Release.
 */
export type ReleaseSchema = {
  createdAt: Date;
  description: string;
  name: string;
  publishedAt: Date;
  tagName: string;
};

/** @internal */
export const ReleaseSchema$inboundSchema: z.ZodType<
  ReleaseSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  name: z.string(),
  published_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  tag_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "published_at": "publishedAt",
    "tag_name": "tagName",
  });
});

/** @internal */
export type ReleaseSchema$Outbound = {
  created_at: string;
  description: string;
  name: string;
  published_at: string;
  tag_name: string;
};

/** @internal */
export const ReleaseSchema$outboundSchema: z.ZodType<
  ReleaseSchema$Outbound,
  z.ZodTypeDef,
  ReleaseSchema
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  name: z.string(),
  publishedAt: z.date().transform(v => v.toISOString()),
  tagName: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    publishedAt: "published_at",
    tagName: "tag_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseSchema$ {
  /** @deprecated use `ReleaseSchema$inboundSchema` instead. */
  export const inboundSchema = ReleaseSchema$inboundSchema;
  /** @deprecated use `ReleaseSchema$outboundSchema` instead. */
  export const outboundSchema = ReleaseSchema$outboundSchema;
  /** @deprecated use `ReleaseSchema$Outbound` instead. */
  export type Outbound = ReleaseSchema$Outbound;
}

export function releaseSchemaToJSON(releaseSchema: ReleaseSchema): string {
  return JSON.stringify(ReleaseSchema$outboundSchema.parse(releaseSchema));
}

export function releaseSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseSchema' from JSON`,
  );
}
