/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detail schema for Sponsor (used in single item endpoints).
 */
export type SponsorDetail = {
  imageUrl: string;
  key: string;
  name: string;
  sponsorType: string;
  url: string;
  description: string;
  isMember: boolean;
  jobUrl: string;
  memberType: string;
};

/** @internal */
export const SponsorDetail$inboundSchema: z.ZodType<
  SponsorDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_url: z.string(),
  key: z.string(),
  name: z.string(),
  sponsor_type: z.string(),
  url: z.string(),
  description: z.string(),
  is_member: z.boolean(),
  job_url: z.string(),
  member_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
    "sponsor_type": "sponsorType",
    "is_member": "isMember",
    "job_url": "jobUrl",
    "member_type": "memberType",
  });
});

/** @internal */
export type SponsorDetail$Outbound = {
  image_url: string;
  key: string;
  name: string;
  sponsor_type: string;
  url: string;
  description: string;
  is_member: boolean;
  job_url: string;
  member_type: string;
};

/** @internal */
export const SponsorDetail$outboundSchema: z.ZodType<
  SponsorDetail$Outbound,
  z.ZodTypeDef,
  SponsorDetail
> = z.object({
  imageUrl: z.string(),
  key: z.string(),
  name: z.string(),
  sponsorType: z.string(),
  url: z.string(),
  description: z.string(),
  isMember: z.boolean(),
  jobUrl: z.string(),
  memberType: z.string(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
    sponsorType: "sponsor_type",
    isMember: "is_member",
    jobUrl: "job_url",
    memberType: "member_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SponsorDetail$ {
  /** @deprecated use `SponsorDetail$inboundSchema` instead. */
  export const inboundSchema = SponsorDetail$inboundSchema;
  /** @deprecated use `SponsorDetail$outboundSchema` instead. */
  export const outboundSchema = SponsorDetail$outboundSchema;
  /** @deprecated use `SponsorDetail$Outbound` instead. */
  export type Outbound = SponsorDetail$Outbound;
}

export function sponsorDetailToJSON(sponsorDetail: SponsorDetail): string {
  return JSON.stringify(SponsorDetail$outboundSchema.parse(sponsorDetail));
}

export function sponsorDetailFromJSON(
  jsonString: string,
): SafeParseResult<SponsorDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SponsorDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SponsorDetail' from JSON`,
  );
}
